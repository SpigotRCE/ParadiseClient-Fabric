package io.github.spigotrce.paradiseclientfabric.exploit;

import io.github.spigotrce.paradiseclientfabric.Helper;
import io.github.spigotrce.paradiseclientfabric.ParadiseClient_Fabric;
import io.github.spigotrce.paradiseclientfabric.exploit.impl.*;
import net.minecraft.client.MinecraftClient;

import java.util.ArrayList;
import java.util.List;

/**
 * Manages and handles various exploits.
 *
 * @author SpigotRCE
 * @since 2.5
 */
public class ExploitManager {
    private final MinecraftClient minecraftClient;

    /**
     * A list of all available exploits.
     */
    private final ArrayList<Exploit> exploits = new ArrayList<>();

    /**
     * Constructs a new ExploitManager with the given exploits.
     */
    public ExploitManager(MinecraftClient minecraftClient) {
        this.minecraftClient = minecraftClient;
    }

    public void init() {
        register(new BrigadierExploit(minecraftClient));
        register(new PaperWindowExploit(minecraftClient));
        register(new SignExploit(minecraftClient));
        register(new NegativeInfinityExploit(minecraftClient));
        register(new VelocityReportExploit(minecraftClient));
        register(new ViaVersionExploit(minecraftClient));
        register(new NotBountiesExploit(minecraftClient));
    }

    /**
     * Handles the execution of the exploit with the given name.
     *
     * @param name The name of the exploit to be executed.
     */
    public void handleExploit(String name) {
        Exploit exploit = getExploit(name);
        if (exploit == null) {
            Helper.printChatMessage("Unknown exploit.");
            return;
        }
        ParadiseClient_Fabric.exploitMod.isRunning = true;
        exploit.execute();
    }

    /**
     * Retrieves the exploit with the given alias.
     *
     * @param alias The alias of the exploit to be retrieved.
     * @return The exploit with the given alias, or null if no such exploit exists.
     */
    public Exploit getExploit(String alias) {
        for (Exploit exploit : exploits) {
            if (exploit.getAlias().equals(alias)) {
                return exploit;
            }
        }
        return null;
    }

    /**
     * Retrieves the exploit with the given alias.
     *
     * @param exploit The {@link Exploit} to be registered.
     */
    public void register(Exploit exploit) {
        this.exploits.add(exploit);
    }

    /**
     * Retrieves the list of all available exploits.
     *
     * @return The list of all available exploits.
     */
    public List<Exploit> getExploits() {
        return exploits;
    }
}
